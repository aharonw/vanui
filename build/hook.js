// Generated by CoffeeScript 1.7.1
(function() {
  var Application, OVERLAY_HTML, TabListView, TabView;

  OVERLAY_HTML = "<div id='tabswitcher-overlay' style=\"display:none\">\n  <div id=\"box\">\n    <input type=\"text\"></input>\n    <div id=\"results\">\n      <ul></ul>\n    </div>\n  </div>\n</div>";

  TabView = (function() {
    function TabView(tab, indexes) {
      this.tab = tab;
      this.url = removeProtocol(this.tab.url);
      this.indexes = indexes;
    }

    TabView.prototype.render = function() {
      var html, i, j, _i, _ref;
      html = '<li>';
      if (this.tab.favIconUrl != null) {
        html += "<img class='favicon' src='" + this.tab.favIconUrl + "'></img>";
      }
      html += '<span class="title">';
      html += this.tab.title;
      html += '</span>';
      html += '<div class="url">';
      j = 0;
      for (i = _i = 0, _ref = this.url.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if ((this.indexes != null) && this.indexes[j] === i) {
          html += "<b>" + (this.url.charAt(i)) + "</b>";
          j++;
        } else {
          html += this.url.charAt(i);
        }
      }
      html += '</div></div>';
      return html += '</li>';
    };

    return TabView;

  })();

  TabListView = (function() {
    function TabListView(element) {
      this.element_ = element;
    }

    TabListView.prototype.element = function() {
      return this.element_;
    };

    TabListView.prototype.render = function() {
      var tabView, _i, _len, _ref, _results;
      this.element().empty();
      _ref = this.tabViews;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tabView = _ref[_i];
        _results.push(this.element().append(tabView.render()));
      }
      return _results;
    };

    TabListView.prototype.update = function(candidates) {
      var candidate;
      this.tabViews = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = candidates.length; _i < _len; _i++) {
          candidate = candidates[_i];
          _results.push(new TabView(candidate.tab || candidate, candidate.indexes));
        }
        return _results;
      })();
      return this.render();
    };

    return TabListView;

  })();

  Application = (function() {
    function Application(config) {
      this.config_ = config;
      this.injectView();
      this.element().find('input').keyup((function(_this) {
        return function(event) {
          return _this.onInput(event);
        };
      })(this));
      this.tabListView = new TabListView(this.element().find('ul'));
    }

    Application.prototype.element = function() {
      return this.element_ || (this.element_ = $('#tabswitcher-overlay'));
    };

    Application.prototype.tabs = function() {
      return this.tabs_;
    };

    Application.prototype.onInput = function(event) {
      var candidates;
      candidates = sortByMatchingScore(this.tabs(), event.target.value);
      this.tabListView.update(candidates);
      if (event.keyCode === 13) {
        if (candidates != null) {
          return this.switchTab(candidates[0].tab);
        }
      }
    };

    Application.prototype.hide = function() {
      return this.element().hide();
    };

    Application.prototype.show = function() {
      this.tabListView.update(this.tabs());
      this.element().show();
      return this.element().find('input').focus();
    };

    Application.prototype.switchTab = function(tab) {
      this.hide();
      return chrome.extension.sendRequest({
        message: "switchTab",
        target: tab
      });
    };

    Application.prototype.isKeyboardEventMatching = function(event) {
      return event.ctrlKey === this.config_.ctrlKey && event.altKey === this.config_.altKey && event.shiftKey === this.config_.shiftKey && event.metaKey === this.config_.metaKey && event.keyCode === this.config_.keyCode;
    };

    Application.prototype.hotKeyListener = function(event) {
      if (event.keyCode != null) {
        if (this.isKeyboardEventMatching(event)) {
          return chrome.extension.sendRequest({
            message: "getTabs"
          }, (function(_this) {
            return function(response) {
              _this.tabs_ = response.tabs;
              return _this.show();
            };
          })(this));
        } else if (event.keyCode === 27) {
          return this.hide();
        }
      }
    };

    Application.prototype.injectView = function() {
      return $('body').append(OVERLAY_HTML);
    };

    return Application;

  })();

  chrome.extension.sendRequest({
    message: "requestConfig"
  }, function(response) {
    var app;
    app = new Application(response.config);
    return window.addEventListener("keyup", function(e) {
      return app.hotKeyListener(e);
    }, false);
  });

}).call(this);
